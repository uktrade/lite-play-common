package components.common.state;


import static play.mvc.Controller.ctx;

import org.apache.commons.lang3.StringUtils;
import utils.common.UploadUtil;

import java.util.Map;
import java.util.Objects;

/**
 * Provides the name and value of a single ContextParam for use by a {@link ContextParamManager}. Consumers requiring
 * read/write access to a ContextParam should inject the relevant implementation of this class and use the getParamValue
 * or updateParamValue methods.
 */
public abstract class ContextParamProvider {

  /**
   * Retrieves a parameter from the current request. If strict is true, an exception is thrown if the parameter is not
   * defined, otherwise returns empty string.
   * @param paramName Name of parameter to read.
   * @param strict Whether to throw an exception if the parameter is missing.
   * @return Parameter value or empty string.
   */
  private static String getParamValueFromRequest(String paramName, boolean strict) {

    //Check GET params first
    String queryParam = ctx().request().getQueryString(paramName);

    if (!StringUtils.isBlank(queryParam)) {
      return queryParam;
    }
    else {
      //Check POST params
      Map<String, String[]> postParamMap;
      if (UploadUtil.isMultipartRequest(ctx().request())) {
        postParamMap = ctx().request().body().asMultipartFormData().asFormUrlEncoded();
      } else {
        postParamMap = ctx().request().body().asFormUrlEncoded();
      }

      if (postParamMap == null) {
        if (strict) {
          throw new RuntimeException("Param " + paramName + " was not found in GET params and no POST data available");
        }
        else {
          return "";
        }
      }

      String[] paramArray = postParamMap.get(paramName);

      if (paramArray == null || paramArray.length == 0) {
        if (strict) {
          throw new RuntimeException("Request body missing mandatory parameter " + paramName);
        }
        else {
          return "";
        }
      }
      else {
        return StringUtils.defaultString(paramArray[0]);
      }
    }
  }

  /**
   * @return The name of this parameter in both the HTTP request and the HTTP context.
   */
  public abstract String getParamName();

  /**
   * Gets the value of the parameter as it was sent in the request. Note this may not be the latest value; the value
   * on the current context may have been modified. Therefore you should only use this method to retrieve a parameter
   * before it could have been modified - otherwise, use {@link #getParamValueFromContext()}.  If the parameter is not
   * set on the context, returns empty string.
   * @return Param value or empty string.
   */
  public String getParamValueFromRequest() {
    return getParamValueFromRequest(getParamName(), false);
  }

  /**
   * Gets the current value of the parameter as it is on the current HTTP context. This should be used in preference
   * to {@link #getParamValueFromRequest} in most cases as it should always be the latest value. If the parameter is not
   * set on the context, returns empty string.
   * @return Param value or empty string.
   */
  public String getParamValueFromContext() {
    return Objects.toString(ctx().args.get(getParamName()), "");
  }

  /**
   * Updates the current HTTP context with a new value for this parameter. This new value will be set on any URLs
   * or hidden form fields generated by the current {@link ContextParamManager}.
   * @param paramValue New value for the parameter.
   */
  public void updateParamValueOnContext(String paramValue) {
    ctx().args.put(getParamName(), paramValue);
  }
}
